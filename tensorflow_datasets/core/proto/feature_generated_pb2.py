# coding=utf-8
# Copyright 2023 The TensorFlow Datasets Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: skip-file

# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: feature.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n\rfeature.proto\x12\x13tensorflow_datasets"\xa0\x01\n\x0c\x46\x65\x61turesDict\x12\x41\n\x08\x66\x65\x61tures\x18\x01'
    b' \x03(\x0b\x32/.tensorflow_datasets.FeaturesDict.FeaturesEntry\x1aM\n\rFeaturesEntry\x12\x0b\n\x03key\x18\x01'
    b' \x01(\t\x12+\n\x05value\x18\x02'
    b' \x01(\x0b\x32\x1c.tensorflow_datasets.Feature:\x02\x38\x01"\xbf\x05\n\x07\x46\x65\x61ture\x12\x19\n\x11python_class_name\x18\x01'
    b' \x01(\t\x12\x13\n\x0b\x64\x65scription\x18\x0e'
    b' \x01(\t\x12\x13\n\x0bvalue_range\x18\x0f'
    b' \x01(\t\x12\x38\n\x0cjson_feature\x18\x02 \x01(\x0b\x32'
    b' .tensorflow_datasets.JsonFeatureH\x00\x12:\n\rfeatures_dict\x18\x03'
    b' \x01(\x0b\x32!.tensorflow_datasets.FeaturesDictH\x00\x12\x34\n\x06tensor\x18\x04'
    b' \x01(\x0b\x32".tensorflow_datasets.TensorFeatureH\x00\x12\x36\n\x0b\x63lass_label\x18\x05'
    b' \x01(\x0b\x32\x1f.tensorflow_datasets.ClassLabelH\x00\x12\x32\n\x05image\x18\x06'
    b' \x01(\x0b\x32!.tensorflow_datasets.ImageFeatureH\x00\x12\x32\n\x05video\x18\x07'
    b' \x01(\x0b\x32!.tensorflow_datasets.VideoFeatureH\x00\x12\x32\n\x05\x61udio\x18\x08'
    b' \x01(\x0b\x32!.tensorflow_datasets.AudioFeatureH\x00\x12?\n\x0c\x62ounding_box\x18\t'
    b" \x01(\x0b\x32'.tensorflow_datasets.BoundingBoxFeatureH\x00\x12\x30\n\x04text\x18\n"
    b' \x01(\x0b\x32'
    b' .tensorflow_datasets.TextFeatureH\x00\x12>\n\x0btranslation\x18\x0b'
    b" \x01(\x0b\x32'.tensorflow_datasets.TranslationFeatureH\x00\x12\x31\n\x08sequence\x18\x0c"
    b' \x01(\x0b\x32\x1d.tensorflow_datasets.SequenceH\x00\x42\t\n\x07\x63ontent"\x1b\n\x0bJsonFeature\x12\x0c\n\x04json\x18\x01'
    b' \x01(\t"\x1b\n\x05Shape\x12\x12\n\ndimensions\x18\x01'
    b' \x03(\x03"[\n\rTensorFeature\x12)\n\x05shape\x18\x01'
    b' \x01(\x0b\x32\x1a.tensorflow_datasets.Shape\x12\r\n\x05\x64type\x18\x02'
    b' \x01(\t\x12\x10\n\x08\x65ncoding\x18\x03'
    b' \x01(\t"!\n\nClassLabel\x12\x13\n\x0bnum_classes\x18\x01'
    b' \x01(\x03"\xa7\x01\n\x0cImageFeature\x12)\n\x05shape\x18\x01'
    b' \x01(\x0b\x32\x1a.tensorflow_datasets.Shape\x12\r\n\x05\x64type\x18\x02'
    b' \x01(\t\x12\x17\n\x0f\x65ncoding_format\x18\x03'
    b' \x01(\t\x12\x14\n\x0cuse_colormap\x18\x04'
    b' \x01(\x08\x12.\n\x05label\x18\x05'
    b' \x01(\x0b\x32\x1f.tensorflow_datasets.ClassLabel"\x92\x01\n\x0cVideoFeature\x12)\n\x05shape\x18\x01'
    b' \x01(\x0b\x32\x1a.tensorflow_datasets.Shape\x12\r\n\x05\x64type\x18\x02'
    b' \x01(\t\x12\x17\n\x0f\x65ncoding_format\x18\x03'
    b' \x01(\t\x12\x14\n\x0cuse_colormap\x18\x04'
    b' \x01(\x08\x12\x19\n\x11\x66\x66mpeg_extra_args\x18\x05'
    b' \x03(\t"\x99\x01\n\x0c\x41udioFeature\x12)\n\x05shape\x18\x01'
    b' \x01(\x0b\x32\x1a.tensorflow_datasets.Shape\x12\r\n\x05\x64type\x18\x02'
    b' \x01(\t\x12\x13\n\x0b\x66ile_format\x18\x03'
    b' \x01(\t\x12\x13\n\x0bsample_rate\x18\x04'
    b' \x01(\x03\x12\x10\n\x08\x65ncoding\x18\x05'
    b' \x01(\t\x12\x13\n\x0blazy_decode\x18\x06'
    b' \x01(\x08"N\n\x12\x42oundingBoxFeature\x12)\n\x05shape\x18\x01'
    b' \x01(\x0b\x32\x1a.tensorflow_datasets.Shape\x12\r\n\x05\x64type\x18\x02'
    b' \x01(\t"\r\n\x0bTextFeature"O\n\x12TranslationFeature\x12\x11\n\tlanguages\x18\x01'
    b' \x03(\t\x12&\n\x1evariable_languages_per_example\x18\x02'
    b' \x01(\x08"I\n\x08Sequence\x12-\n\x07\x66\x65\x61ture\x18\x01'
    b' \x01(\x0b\x32\x1c.tensorflow_datasets.Feature\x12\x0e\n\x06length\x18\x02'
    b' \x01(\x03\x42\x03\xf8\x01\x01\x62\x06proto3'
)

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'feature_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:
  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\370\001\001'
  _FEATURESDICT_FEATURESENTRY._options = None
  _FEATURESDICT_FEATURESENTRY._serialized_options = b'8\001'
  _FEATURESDICT._serialized_start = 39
  _FEATURESDICT._serialized_end = 199
  _FEATURESDICT_FEATURESENTRY._serialized_start = 122
  _FEATURESDICT_FEATURESENTRY._serialized_end = 199
  _FEATURE._serialized_start = 202
  _FEATURE._serialized_end = 905
  _JSONFEATURE._serialized_start = 907
  _JSONFEATURE._serialized_end = 934
  _SHAPE._serialized_start = 936
  _SHAPE._serialized_end = 963
  _TENSORFEATURE._serialized_start = 965
  _TENSORFEATURE._serialized_end = 1056
  _CLASSLABEL._serialized_start = 1058
  _CLASSLABEL._serialized_end = 1091
  _IMAGEFEATURE._serialized_start = 1094
  _IMAGEFEATURE._serialized_end = 1261
  _VIDEOFEATURE._serialized_start = 1264
  _VIDEOFEATURE._serialized_end = 1410
  _AUDIOFEATURE._serialized_start = 1413
  _AUDIOFEATURE._serialized_end = 1566
  _BOUNDINGBOXFEATURE._serialized_start = 1568
  _BOUNDINGBOXFEATURE._serialized_end = 1646
  _TEXTFEATURE._serialized_start = 1648
  _TEXTFEATURE._serialized_end = 1661
  _TRANSLATIONFEATURE._serialized_start = 1663
  _TRANSLATIONFEATURE._serialized_end = 1742
  _SEQUENCE._serialized_start = 1744
  _SEQUENCE._serialized_end = 1817
# @@protoc_insertion_point(module_scope)
